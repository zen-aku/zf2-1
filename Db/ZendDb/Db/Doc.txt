Временно закомментирован код в файлах
Zend\Db\Query\Sql\Where
Zend\Db\Query\Sql\Having

AbstractCommandQuery добавлено:
    свойство table
    setTable()
    getTable()

    Убрать эти свойства и методы из всех классов ddl и sql унаследованных от AbstractCommandQuery,
    В Select оставить from() со ссылкой на setTable()  в setTable() перенести код из from()
    В setTable() сделать проверки(?) как в Select::from()

    Оставить методы into, from, table со ссылкой на setTable()?

В CreateTable сделать метод __call() или отдельные методы-команды addInteger(), addVarchar() (или просто integer(), varchar() по аналогии
с классами Ddl и Sql и их методами-командами Ddl::createTable()


В Ddl сделать метод ServiceTable(), который предоставит доступ к объекту класса ServiceTable, который
в свою очередь должен иметь соответствующие методы создания объектов Column и Constraint.
Или сделать два метода ColumnTable() и ConstraintTable() для предоставления доступа к объектам Column и Constraint.

В ColumnTable() надо собирать добавляемые колонки в массив. Сделать его итератором.
А в CreateTable::addColumn() сделать возможность передавать объект-итератор класса ColumnTable
с итерацией его колонок в таблицу.

А может сделать в самом CreateTable и AlterTable методы создания колонок-объектов

///////////////////////////////////////////
    // Динамическое создание объектов клолнок в классах CreateTable и AlterTable
    // Проблема разных параметров для разных типов колонок делает динамическое создание колонок нецелесообразным!
   
    private $columnType = array (
        'integer'   => 'Zend\Db\Query\Ddl\Column\Integer',
        'int'       => 'Zend\Db\Query\Ddl\Column\Integer',
        'float'     => 'Zend\Db\Query\Ddl\Column\Float',
        'decimal'   => 'Zend\Db\Query\Ddl\Column\Decimal', 
        'dec'       => 'Zend\Db\Query\Ddl\Column\Decimal', 
    ); 
  
    /**
     * @param string|Column\ColumnInterface $name 
     * @param string $type
     * @param $isNullable boolean 
     * @param null|string|int $default
     * @param array $options
     * @throws Exception\InvalidArgumentException
     * @return self
     */

    public function addColumn( $name, $type = null, $isNullable = false, $default = null, array $options = array() ) {       
        if ($name instanceof Column\ColumnInterface) {
            $this->columns[] = $name;
            return $this;
        }      
        $type = strtolower($type);
        if ( !array_key_exists( $type, $this->columnType ) ) {
           throw new Exception\InvalidArgumentException(
                sprintf('Ошибка задания типа колонки: "%s".', strtoupper($type))
            );        
        }       
        $column = new $this->columnType[$type]($name);
        $column->setNullable($isNullable);
        $column->setDefault($default);
        
        $this->columns[] = $column;    
        return $this;
    }
    //////////////////////////////////////////