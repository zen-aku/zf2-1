
В PHP повторяющиеся действия реализуют либа через функции, либо через классы-функции.
В фреймворках такие действия обычно реализуют в специальный директории хелперов, где размещают функции или классы-функции.
В ZF2 не предусмотрено по умолчанию использование функций (хотя ничего не мешает самим их подгружать) и нет так называемых хелперов.
Но сделана возможность создания и подключения классов-функций в виде сервисов.

Классы-сервисы - это классы, реализующие действия, которые повторяются в разных местах кода или в разных проектах.
Очевидно, что если какое-то действие в экшене контроллера больше не будет нигде использоваться, то его не надо выносить в отдельный класс-сервис.

Классы-сервисы бывают :
	- локальными (их использование ограничено модулем, в котором они размещены).
		Как правило их размещают в директории src/NameModule/Service/ и конфигурацию регистрации в SeviceManager прописывают в модульном конфиге (config/module.config.php или Module.php)
	- глобальные (могут использоваться во всём проекте)
		Как правило они размещены в глобальной директории MVC Zend/. Как их регистрировать в SeviceManager и где их размещать?


Механизм регистрации сервиса (плагина) через конфиги module.config.php и Module.php :
  В ServiceManager и всех его наследниках Plugin Manager:

		Plugin Manager 				Config Key 		Interface 				Module Method

	Zend\Mvc\Controller\ControllerManager 		controllers 		ControllerProviderInterface 		getControllerConfig
	Zend\Mvc\Controller\PluginManager 		controller_plugins 	ControllerPluginProviderInterface 	getControllerPluginConfig
	Zend\Filter\FilterPluginManager 		filters 		FilterProviderInterface 		getFilterConfig
	Zend\Form\FormElementManager 			form_elements 		FormElementProviderInterface 		getFormElementConfig
	Zend\Stdlib\Hydrator\HydratorPluginManager 	hydrators 		HydratorProviderInterface 		getHydratorConfig
	Zend\InputFilter\InputFilterPluginManager 	input_filters 		InputFilterProviderInterface 		getInputFilterConfig
	Zend\Mvc\Router\RoutePluginManager 		route_manager 		RouteProviderInterface 			getRouteConfig
	Zend\Serializer\AdapterPluginManager 		serializers 		SerializerProviderInterface 		getSerializerConfig
	Zend\ServiceManager\ServiceManager 		service_manager 	ServiceProviderInterface 		getServiceConfig
	Zend\Validator\ValidatorPluginManager 		validators 		ValidatorProviderInterface 		getValidatorConfig
	Zend\View\HelperPluginManager 			view_helpers 		ViewHelperProviderInterface 		getViewHelperConfig
	Zend\Log\ProcessorPluginManager 		log_processors 		LogProcessorProviderInterface 		getLogProcessorConfig
	Zend\Log\WriterPluginManager 			log_writers 		LogWriterProviderInterface 		getLogWriterConfig

 в зависимоти от младшего ключа в конфигурационной секции конфиг-ключа(Config Key) данные будут помещены в соответствующее свойство плагин манагера :

 key внутри Config Key				properties of Plugin Manager													methods of Plugin Manager

    abstract_factories                          $abstractFactories[] = Closure|AbstractFactoryInterface $factory;	addAbstractFactory($factory, $topOfStack = true)
    factories					$factories[$name] = Closure|FactoryInterface|string $factory;		setFactory($name, $factory, $shared = null)
    invokables 					$invokableClasses[$name] = string $invokableClass			setInvokableClass($name, $invokableClass, $shared = null)
    services					$instances[$name] = object $service					setService($name, $service)
    aliases					$aliases[$alias] = string $nameOrAlias					setAlias($alias, $nameOrAlias)
    shared					$shared[$name] = bool $shared						setShared($name, $isShared)
    delegators					$delegators[$Name][] = string $delegatorFactoryName			addDelegator($serviceName, $delegatorFactoryName)
    initializers				$initializers[]	= callable|InitializerInterface $initializer    	addInitializer($initializer, $topOfStack = true)
    allow_override				$allowOverride = bool $allowOverride					setAllowOverride($allowOverride)


	Как видно в factories могут храниться объекты Closure или объекты фабрик от FactoryInterface.
	Активируются такие факторы автоматическим вызовом у объекта Closure метода __invoke(ServiceLocatorInterface $serviceLocator),
	а у объекта фабрики метода createService( ServiceLocatorInterface $serviceLocator ).

Пример конфигурации в module.config.php:

// a module configuration, "module/SomeModule/config/module.config.php"
return array(
    'service_manager' => array(
        'abstract_factories' => array(
            // Valid values include names of classes implementing
            // AbstractFactoryInterface, instances of classes implementing
            // AbstractFactoryInterface, or any PHP callbacks
            'SomeModule\Service\FallbackFactory',
        ),
        'aliases' => array(
            // Aliasing a FQCN to a service name
            'SomeModule\Model\User' => 'User',
            // Aliasing a name to a known service name
            'AdminUser' => 'User',
            // Aliasing to an alias
            'SuperUser' => 'AdminUser',
        ),
        'factories' => array(
            // Keys are the service names.
            // Valid values include names of classes implementing
            // FactoryInterface, instances of classes implementing
            // FactoryInterface, or any PHP callbacks
            'User'     => 'SomeModule\Service\UserFactory',
            'UserForm' => function ($serviceManager) {
                $form = new SomeModule\Form\User();

                // Retrieve a dependency from the service manager and inject it!
                $form->setInputFilter($serviceManager->get('UserInputFilter'));
                return $form;
            },
        ),
        'invokables' => array(
            // Keys are the service names
            // Values are valid class names to instantiate.
            'UserInputFiler' => 'SomeModule\InputFilter\User',
        ),
        'services' => array(
            // Keys are the service names
            // Values are objects
            'Auth' => new SomeModule\Authentication\AuthenticationService(),
        ),
        'shared' => array(
            // Usually, you'll only indicate services that should **NOT** be
            // shared -- i.e., ones where you want a different instance
            // every time.
            'UserForm' => false,
        ),
    ),
);

Пример конфигурации в Module.php

class Module {
    public function getServiceConfig() {
        return array(
            'abstract_factories' => array(),
            'aliases' => array(),
            'factories' => array(),
            'invokables' => array(),
            'services' => array(),
            'shared' => array(),
        );
    }
}
